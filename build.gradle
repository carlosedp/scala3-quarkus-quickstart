plugins {
    id "java"
    id "scala"
    id "io.quarkus"
    id 'cz.augi.gradle.scalafmt' version '1.21.2'
    id 'io.github.cosmicsilence.scalafix' version '0.2.2'
    id "com.github.ben-manes.versions" version "0.51.0"
    id "com.adarshr.test-logger" version "4.0.0"
}

repositories {
    mavenCentral()
    mavenLocal()
}

def VERSIONS = [
    QUARKUS       : "3.13.1",
    QUARKUS_SCALA3: "1.0.0",
    SCALA3        : "3.4.2",
    MAGNUM        : "1.2.1",
    STTP          : "3.9.8",
    ZIO           : "2.1.7",
    REST_ASSURED  : "5.5.0", // Here we use the latest version of Rest Assured to use the Scala 3 extensions
]

dependencies {
    implementation enforcedPlatform("io.quarkus.platform:quarkus-bom:${VERSIONS.QUARKUS}")
    // Scala 3 Integration
    implementation "io.quarkiverse.scala:quarkus-scala3:${VERSIONS.QUARKUS_SCALA3}"
    implementation "org.scala-lang:scala3-library_3:${VERSIONS.SCALA3}"
    implementation "org.scala-lang:scala3-compiler_3:${VERSIONS.SCALA3}"
    // Quarkus Libs
    implementation "io.quarkus:quarkus-arc"
    implementation "io.quarkus:quarkus-rest"
    implementation "io.quarkus:quarkus-smallrye-openapi"
    implementation "io.quarkus:quarkus-rest-qute"
    implementation "io.quarkus:quarkus-smallrye-metrics"
    implementation "io.quarkus:quarkus-smallrye-health"
    // Quarkus Test Libs
    testImplementation "io.quarkus:quarkus-junit5"
    testImplementation "io.quarkus:quarkus-jacoco"
    testImplementation "io.rest-assured:rest-assured:${VERSIONS.REST_ASSURED}"
    testImplementation "io.rest-assured:scala-extensions:${VERSIONS.REST_ASSURED}"
    testImplementation "org.awaitility:awaitility"
    // Jackson
    implementation "io.quarkus:quarkus-jackson"
    implementation "io.quarkus:quarkus-rest-jackson"
    implementation "com.fasterxml.jackson.module:jackson-module-scala_3"
    // Kafka
    implementation "io.quarkus:quarkus-messaging-kafka"
    testImplementation "io.smallrye.reactive:smallrye-reactive-messaging-in-memory"
    // Hibernate ORM
    implementation "io.quarkus:quarkus-hibernate-orm"
    // JDBC Driver
    implementation "io.quarkus:quarkus-jdbc-postgresql"
    // Narayana JTA
    implementation "io.quarkus:quarkus-narayana-jta"
    // Flyway DB Migration
    implementation "io.quarkus:quarkus-flyway"
    implementation "org.flywaydb:flyway-database-postgresql"
    // Scala 3 libs used on integration examples
    implementation "com.softwaremill.sttp.client3:core_3:${VERSIONS.STTP}"
    implementation "dev.zio:zio_3:${VERSIONS.ZIO}"
    implementation "com.augustnagro:magnum_3:${VERSIONS.MAGNUM}"
}

group "org.acme"
version "1.0.0-SNAPSHOT"

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}


tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = [
        "-feature",
        "-Wunused:all",
    ]
}

test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
    // Ignore Integration Tests for now since we use Maven default directory structure
    // To use this on Gradle remove the "exclude" line below and move the IT files to src/integrationTest/scala
    // Eg. move src/test/scala/org/acme/GreetingResourceIT.scala to src/integrationTest/scala/org/acme/GreetingResourceIT.scala
    exclude '**/*IT*'
}

compileJava {
    options.encoding = "UTF-8"
    options.compilerArgs << "-parameters"
}

compileTestJava {
    options.encoding = "UTF-8"
}

scalafix {
    ignoreSourceSets = [ 'quarkus-generated-sources', 'quarkus-test-generated-sources' ]
}

testlogger {
    theme 'mocha'
    slowThreshold 5000
}

// Custom Tasks (run with ./gradlew lint, ./gradlew deps)
task lint(type: GradleBuild) {
    group 'Custom project tasks'
    description 'Run code linting tasks (scalafmt, scalafix, etc)'
    tasks = ['scalafmt', 'scalafix']
}
task deps(type: GradleBuild) {
    group 'Custom project tasks'
    description 'Check for dependency updates'
    tasks = ['dependencyUpdates']
}
